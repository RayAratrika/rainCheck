{"version":3,"sources":["weatherCard.js","App.js","index.js"],"names":["WeatherDeatils","props","data","tomorrow","Date","time","toLocaleTimeString","replace","main","temp","temp_min","temp_max","weather","description","WeatherCard","response","list","slice","map","tmrw","getDate","dt_txt","className","key","dt","convertToMinutes","Number","split","WeatherInfo","data0","data1","data2","hours","getHours","getMinutes","city","name","toLocaleDateString","Math","floor","UserCoords","lat","lon","makeRequest","a","api","fetch","temp_res","json","temp_data","id","res","App","state","showPosition","bind","position","coords","latitude","longitude","this","console","log","setState","navigator","geolocation","getCurrentPosition","alert","length","sunrise","sunset","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61bb0ef7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './weatherCard.css';\r\n\r\nconst WeatherDeatils = (props) => {\r\n    const data = props.data;\r\n    //<p>At time: {new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}</p>\r\n    const tomorrow = props.tomorrow === false ?\r\n                    <p>At: {new Date(props.time).toLocaleTimeString().replace(/:\\d+ /, ' ')}</p> :\r\n                    <p>Tomorrow at: {new Date(props.time).toLocaleTimeString().replace(/:\\d+ /, ' ')}</p>;\r\n    return (\r\n        <div>\r\n            {tomorrow}\r\n            <p>Temperature: {data.main.temp} °C</p>\r\n            <p>Min: {data.main.temp_min} °C</p>\r\n            <p>Max: {data.main.temp_max} °C</p>\r\n            <p>Rain: {data.weather[0].description}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst WeatherCard = (props) => {\r\n    var arrayList = props.response.list.slice(1, 5);\r\n    return arrayList.map((list) => {\r\n        var tmrw = (new Date().getDate() === new Date(list.dt_txt).getDate()) ? false:true;\r\n        return (\r\n            <div className='card'>\r\n                <WeatherDeatils key={list.dt} data={list} time={list.dt_txt} tomorrow={tmrw} />\r\n            </div>\r\n        );\r\n    });\r\n\r\n}\r\nexport default WeatherCard;","import React from 'react';\r\nimport WeatherCard from './weatherCard';\r\nimport './App.css';\r\n\r\nfunction convertToMinutes(time) {\r\n    return Number(time.split(':')[0]) * 60;\r\n}\r\n\r\nconst WeatherInfo = (props) => {\r\n    const data0 = props.response.list[0];\r\n    const data1 = props.response.list[1];\r\n    const data2 = props.response.list[2];\r\n    const hours = (new Date().getHours() * 60) + (new Date().getMinutes());\r\n\r\n    if (hours > convertToMinutes(data0.dt_txt.split(\" \")[1])) {\r\n\r\n        if (hours <= convertToMinutes(data1.dt_txt.split(\" \")[1])) {\r\n            return (\r\n                <div>\r\n                    <p>In: {props.response.city.name}</p>\r\n                    <p>{new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}, {new Date().toLocaleDateString('es-CL')}</p>\r\n                    <p>Temperature: {Math.floor((data0.main.temp + data1.main.temp) / 2)} °C</p>\r\n                    <p>Min: {Math.floor((data0.main.temp_min + data1.main.temp_min) / 2)} °C</p>\r\n                    <p>Max: {Math.floor((data0.main.temp_max + data1.main.temp_max) / 2)} °C</p>\r\n                    <p>Rain: {data0.weather[0].description}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (hours >= convertToMinutes(data1.dt_txt.split(\" \")[1]) + 105) {\r\n            return (\r\n                <div>\r\n                    <p>In: {props.response.city.name}</p>\r\n                    <p>{new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}, {new Date().toLocaleDateString('es-CL')}</p>\r\n                    <p>Temperature: {Math.floor((data1.main.temp + data2.main.temp) / 2)} °C</p>\r\n                    <p>Min: {Math.floor((data1.main.temp_min + data2.main.temp_min) / 2)} °C</p>\r\n                    <p>Max: {Math.floor((data1.main.temp_max + data2.main.temp_max) / 2)} °C</p>\r\n                    <p>Rain: {data2.weather[0].description}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (hours >= convertToMinutes(data1.dt_txt.split(\" \")[1])) {\r\n            return (\r\n                <div>\r\n                    <p>In: {props.response.city.name}</p>\r\n                    <p>{new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}, {new Date().toLocaleDateString('es-CL')}</p>\r\n                    <p>Temperature: {(data1.main.temp)} °C</p>\r\n                    <p>Min: {(data1.main.temp_min)} °C</p>\r\n                    <p>Max: {(data1.main.temp_max)} °C</p>\r\n                    <p>Rain: {data1.weather[0].description}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n    else if (hours < convertToMinutes(data0.dt_txt.split(\" \")[1]) && (convertToMinutes(data0.dt_txt.split(\" \")[1]) === 1260)) {\r\n        return (\r\n            <div>\r\n                <p>In: {props.response.city.name}</p>\r\n                <p>{new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}, {new Date().toLocaleDateString('es-CL')}</p>\r\n                <p>Temperature: {(data1.main.temp)} °C</p>\r\n                <p>Min: {(data1.main.temp_min)} °C</p>\r\n                <p>Max: {(data1.main.temp_max)} °C</p>\r\n                <p>Rain: {data1.weather[0].description}</p>\r\n            </div>\r\n        );\r\n    }\r\n    else return null;\r\n}\r\n\r\nvar UserCoords = { lat: '', lon: '', data: '' };\r\n\r\nasync function makeRequest() {\r\n    const api = 'b1ed46552dc89999f5a3e717d5316c4f';\r\n    const temp_res = await fetch('https://api.openweathermap.org/data/2.5/weather?lat=' + 12.917857 + '&lon=' + 77.673211 + '&units=metric&appid=' + api);\r\n    const temp_data = await temp_res.json();\r\n    const res = await fetch('https://api.openweathermap.org/data/2.5/forecast?id=' + temp_data.id + '&units=metric&appid=' + api);\r\n    const data = await res.json();\r\n    return data;\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            res: [],\r\n        }\r\n        this.showPosition = this.showPosition.bind(this);\r\n\r\n    }\r\n    \r\n    async showPosition(position) {\r\n        UserCoords.lat = position.coords.latitude;\r\n        UserCoords.lon = position.coords.longitude;\r\n        this.setState({res: await makeRequest()}, () => console.log(this.state.res));\r\n    } \r\n\r\n    async componentDidMount() {\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(this.showPosition);\r\n\r\n        } else {\r\n            alert(\"Geolocation is not supported by this browser.\");\r\n        }\r\n  \r\n    }\r\n\r\n    render() {\r\n        if (this.state.res.length === 0) return null;\r\n        const hours = new Date().getHours();\r\n        const name = (hours < new Date(this.state.res.city.sunrise * 1000).getHours()) ||\r\n            (hours > new Date(this.state.res.city.sunset * 1000).getHours()) ? 'night' : 'day';\r\n        return (\r\n            <div className={name}>\r\n                <div className='topCard'>\r\n                    <WeatherInfo response={this.state.res} />\r\n                </div>\r\n                <div className='weathers'>\r\n                    <WeatherCard response={this.state.res} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}