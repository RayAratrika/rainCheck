{"version":3,"sources":["weatherCard.js","App.js","index.js"],"names":["WeatherDeatils","props","data","tomorrow","Date","time","toLocaleTimeString","replace","main","temp","temp_min","temp_max","weather","description","WeatherCard","arrayList","response","list","slice","console","log","map","tmrw","getDate","dt_txt","className","key","dt","convertToMinutes","Number","split","WeatherInfo","data0","data1","data2","hours","getHours","getMinutes","toLocaleDateString","Math","floor","App","state","res","fetch","json","this","setState","length","name","city","sunrise","sunset","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+OAGMA,G,MAAiB,SAACC,GACpB,IAAMC,EAAOD,EAAMC,KAEbC,GAA8B,IAAnBF,EAAME,SACP,kCAAQ,IAAIC,KAAKH,EAAMI,MAAMC,qBAAqBC,QAAQ,QAAS,MACnE,2CAAiB,IAAIH,KAAKH,EAAMI,MAAMC,qBAAqBC,QAAQ,QAAS,MAC5F,OACI,6BACKJ,EACD,2CAAiBD,EAAKM,KAAKC,KAA3B,UACA,mCAASP,EAAKM,KAAKE,SAAnB,UACA,mCAASR,EAAKM,KAAKG,SAAnB,UACA,oCAAUT,EAAKU,QAAQ,GAAGC,gBAkBvBC,EAbK,SAACb,GACjB,IAAIc,EAAYd,EAAMe,SAASC,KAAKC,MAAM,EAAG,GAE7C,OADAC,QAAQC,IAAIL,GACLA,EAAUM,KAAI,SAACJ,GAClB,IAAIK,GAAQ,IAAIlB,MAAOmB,YAAc,IAAInB,KAAKa,EAAKO,QAAQD,UAC3D,OACI,yBAAKE,UAAU,QACX,kBAAC,EAAD,CAAgBC,IAAKT,EAAKU,GAAIzB,KAAMe,EAAMZ,KAAMY,EAAKO,OAAQrB,SAAUmB,S,MCvBvF,SAASM,EAAiBvB,GACtB,OAAoC,GAA7BwB,OAAOxB,EAAKyB,MAAM,KAAK,IAGlC,IAAMC,EAAc,SAAC9B,GACjB,IAAM+B,EAAQ/B,EAAMe,SAASC,KAAK,GAC5BgB,EAAQhC,EAAMe,SAASC,KAAK,GAC5BiB,EAAQjC,EAAMe,SAASC,KAAK,GAC5BkB,EAAiC,IAAxB,IAAI/B,MAAOgC,YAAoB,IAAIhC,MAAOiC,aAEzD,OAAIF,EAAQP,EAAiBI,EAAMR,OAAOM,MAAM,KAAK,IAE7CK,GAASP,EAAiBK,EAAMT,OAAOM,MAAM,KAAK,IAE9C,6BACI,4BAAI,IAAI1B,MAAOE,qBAAqBC,QAAQ,QAAS,KAArD,MAA6D,IAAIH,MAAOkC,mBAAmB,UAC3F,2CAAiBC,KAAKC,OAAOR,EAAMxB,KAAKC,KAAOwB,EAAMzB,KAAKC,MAAQ,GAAlE,UACA,mCAAS8B,KAAKC,OAAOR,EAAMxB,KAAKE,SAAWuB,EAAMzB,KAAKE,UAAY,GAAlE,UACA,mCAAS6B,KAAKC,OAAOR,EAAMxB,KAAKG,SAAWsB,EAAMzB,KAAKG,UAAY,GAAlE,UACA,oCAAUqB,EAAMpB,QAAQ,GAAGC,cAKnCsB,GAASP,EAAiBK,EAAMT,OAAOM,MAAM,KAAK,IAAM,IAEpD,6BACI,4BAAI,IAAI1B,MAAOE,qBAAqBC,QAAQ,QAAS,KAArD,MAA6D,IAAIH,MAAOkC,mBAAmB,UAC3F,2CAAiBC,KAAKC,OAAOP,EAAMzB,KAAKC,KAAOyB,EAAM1B,KAAKC,MAAQ,GAAlE,UACA,mCAAS8B,KAAKC,OAAOP,EAAMzB,KAAKE,SAAWwB,EAAM1B,KAAKE,UAAY,GAAlE,UACA,mCAAS6B,KAAKC,OAAOP,EAAMzB,KAAKG,SAAWuB,EAAM1B,KAAKG,UAAY,GAAlE,UACA,oCAAUuB,EAAMtB,QAAQ,GAAGC,cAKnCsB,GAASP,EAAiBK,EAAMT,OAAOM,MAAM,KAAK,IAE9C,6BACI,4BAAI,IAAI1B,MAAOE,qBAAqBC,QAAQ,QAAS,KAArD,MAA6D,IAAIH,MAAOkC,mBAAmB,UAC3F,2CAAkBL,EAAMzB,KAAKC,KAA7B,UACA,mCAAUwB,EAAMzB,KAAKE,SAArB,UACA,mCAAUuB,EAAMzB,KAAKG,SAArB,UACA,oCAAUsB,EAAMrB,QAAQ,GAAGC,mBAPvC,EAaIsB,EAAQP,EAAiBI,EAAMR,OAAOM,MAAM,KAAK,KAAyD,OAAjDF,EAAiBI,EAAMR,OAAOM,MAAM,KAAK,IAElG,6BACI,4BAAI,IAAI1B,MAAOE,qBAAqBC,QAAQ,QAAS,KAArD,MAA6D,IAAIH,MAAOkC,mBAAmB,UAC3F,2CAAkBL,EAAMzB,KAAKC,KAA7B,UACA,mCAAUwB,EAAMzB,KAAKE,SAArB,UACA,mCAAUuB,EAAMzB,KAAKG,SAArB,UACA,oCAAUsB,EAAMrB,QAAQ,GAAGC,cAI3B,MAqCD4B,E,4MA/BXC,MAAQ,CACJC,IAAK,I,0LAIO,mC,SACMC,MAAM,mH,cAAlBD,E,gBACaA,EAAIE,O,OAAjB3C,E,OACN4C,KAAKC,SAAS,CAAEJ,IAAKzC,IACrBiB,QAAQC,IAAIlB,G,qIAIZ,GAA8B,IAA1B4C,KAAKJ,MAAMC,IAAIK,OAAc,OAAO,KACxC,IAAMb,GAAQ,IAAI/B,MAAOgC,WACnBa,EAAQd,EAAQ,IAAI/B,KAAmC,IAA9B0C,KAAKJ,MAAMC,IAAIO,KAAKC,SAAgBf,YAC9DD,EAAQ,IAAI/B,KAAkC,IAA7B0C,KAAKJ,MAAMC,IAAIO,KAAKE,QAAehB,WAAc,QAAU,MAE7E,OADJjB,QAAQC,IAAIe,EAAQ,IAAI/B,KAAkC,IAA7B0C,KAAKJ,MAAMC,IAAIO,KAAKE,QAAehB,YAE5D,yBAAKX,UAAWwB,GACZ,yBAAKxB,UAAU,WACX,kBAAC,EAAD,CAAaT,SAAU8B,KAAKJ,MAAMC,OAEtC,yBAAKlB,UAAU,YACX,kBAAC,EAAD,CAAaT,SAAU8B,KAAKJ,MAAMC,Y,GA1BpCU,IAAMC,WChExBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.af823441.chunk.js","sourcesContent":["import React from 'react';\r\nimport './weatherCard.css';\r\n\r\nconst WeatherDeatils = (props) => {\r\n    const data = props.data;\r\n    //<p>At time: {new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}</p>\r\n    const tomorrow = props.tomorrow === false ?\r\n                    <p>At: {new Date(props.time).toLocaleTimeString().replace(/:\\d+ /, ' ')}</p> :\r\n                    <p>Tomorrow at: {new Date(props.time).toLocaleTimeString().replace(/:\\d+ /, ' ')}</p>;\r\n    return (\r\n        <div>\r\n            {tomorrow}\r\n            <p>Temperature: {data.main.temp} °C</p>\r\n            <p>Min: {data.main.temp_min} °C</p>\r\n            <p>Max: {data.main.temp_max} °C</p>\r\n            <p>Rain: {data.weather[0].description}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst WeatherCard = (props) => {\r\n    var arrayList = props.response.list.slice(1, 5);\r\n    console.log(arrayList);\r\n    return arrayList.map((list) => {\r\n        var tmrw = (new Date().getDate() === new Date(list.dt_txt).getDate()) ? false:true;\r\n        return (\r\n            <div className='card'>\r\n                <WeatherDeatils key={list.dt} data={list} time={list.dt_txt} tomorrow={tmrw} />\r\n            </div>\r\n        );\r\n    });\r\n\r\n}\r\nexport default WeatherCard;","import React from 'react';\r\nimport WeatherCard from './weatherCard';\r\nimport './App.css';\r\n\r\nfunction convertToMinutes(time) {\r\n    return Number(time.split(':')[0]) * 60;\r\n}\r\n\r\nconst WeatherInfo = (props) => {\r\n    const data0 = props.response.list[0];\r\n    const data1 = props.response.list[1];\r\n    const data2 = props.response.list[2];\r\n    const hours = (new Date().getHours() * 60) + (new Date().getMinutes());\r\n\r\n    if (hours > convertToMinutes(data0.dt_txt.split(\" \")[1])) {\r\n\r\n        if (hours <= convertToMinutes(data1.dt_txt.split(\" \")[1])) {\r\n            return (\r\n                <div>\r\n                    <p>{new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}, {new Date().toLocaleDateString('es-CL')}</p>\r\n                    <p>Temperature: {Math.floor((data0.main.temp + data1.main.temp) / 2)} °C</p>\r\n                    <p>Min: {Math.floor((data0.main.temp_min + data1.main.temp_min) / 2)} °C</p>\r\n                    <p>Max: {Math.floor((data0.main.temp_max + data1.main.temp_max) / 2)} °C</p>\r\n                    <p>Rain: {data0.weather[0].description}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (hours >= convertToMinutes(data1.dt_txt.split(\" \")[1]) + 105) {\r\n            return (\r\n                <div>\r\n                    <p>{new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}, {new Date().toLocaleDateString('es-CL')}</p>\r\n                    <p>Temperature: {Math.floor((data1.main.temp + data2.main.temp) / 2)} °C</p>\r\n                    <p>Min: {Math.floor((data1.main.temp_min + data2.main.temp_min) / 2)} °C</p>\r\n                    <p>Max: {Math.floor((data1.main.temp_max + data2.main.temp_max) / 2)} °C</p>\r\n                    <p>Rain: {data2.weather[0].description}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (hours >= convertToMinutes(data1.dt_txt.split(\" \")[1])) {\r\n            return (\r\n                <div>\r\n                    <p>{new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}, {new Date().toLocaleDateString('es-CL')}</p>\r\n                    <p>Temperature: {(data1.main.temp)} °C</p>\r\n                    <p>Min: {(data1.main.temp_min)} °C</p>\r\n                    <p>Max: {(data1.main.temp_max)} °C</p>\r\n                    <p>Rain: {data1.weather[0].description}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n    else if(hours < convertToMinutes(data0.dt_txt.split(\" \")[1]) && (convertToMinutes(data0.dt_txt.split(\" \")[1]) === 1260)) {\r\n        return (\r\n            <div>\r\n                <p>{new Date().toLocaleTimeString().replace(/:\\d+ /, ' ')}, {new Date().toLocaleDateString('es-CL')}</p>\r\n                <p>Temperature: {(data1.main.temp)} °C</p>\r\n                <p>Min: {(data1.main.temp_min)} °C</p>\r\n                <p>Max: {(data1.main.temp_max)} °C</p>\r\n                <p>Rain: {data1.weather[0].description}</p>\r\n            </div>\r\n        );\r\n    }\r\n    else return null;\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        res: []\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const api = 'b1ed46552dc89999f5a3e717d5316c4f';\r\n        const res = await fetch('https://api.openweathermap.org/data/2.5/forecast?id=1277333&units=metric&appid=' + api);\r\n        const data = await res.json();\r\n        this.setState({ res: data });\r\n        console.log(data);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.res.length === 0) return null;\r\n        const hours = new Date().getHours();\r\n        const name = (hours < new Date(this.state.res.city.sunrise * 1000).getHours()) ||\r\n            (hours > new Date(this.state.res.city.sunset * 1000).getHours()) ? 'night' : 'day';\r\n        console.log(hours > new Date(this.state.res.city.sunset * 1000).getHours());\r\n            return (\r\n            <div className={name}>\r\n                <div className='topCard'>\r\n                    <WeatherInfo response={this.state.res} />\r\n                </div>\r\n                <div className='weathers'>\r\n                    <WeatherCard response={this.state.res} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}